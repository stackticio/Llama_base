
apiVersion: batch/v1
kind: Job
metadata:
  name: bucket-flowise-user-bucket-job
  namespace: minio
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-minio
        image: busybox:1.28
        command: ['sh', '-c', 'until wget -T 1 -q -O - http://minio.minio.svc.cluster.local:9000/minio/health/ready || [ $SECONDS -gt 120 ]; do echo "Waiting for MinIO to be ready... ($SECONDS seconds elapsed)"; sleep 2; done; if wget -T 1 -q -O - http://minio.minio.svc.cluster.local:9000/minio/health/ready; then echo "MinIO is ready!"; else echo "Timed out waiting for MinIO"; exit 1; fi']
      containers:
        - name: bucket-flowise-user-bucket-job
          image: minio/mc:RELEASE.2024-08-26T10-49-58Z 
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Set alias using HTTP (adjust protocol as needed)
              echo "MinIO endpoint is available, proceeding with configuration..."
              # Try to set the alias with retries
              max_retries=5
              retry_count=0
              alias_set=false
              
              while [ $retry_count -lt $max_retries ] && [ "$alias_set" = "false" ]; do
                if mc alias set myminio http://minio.minio.svc.cluster.local:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; then
                  echo "Successfully set MinIO alias on attempt $((retry_count+1))"
                  alias_set=true
                else
                  retry_count=$((retry_count+1))
                  echo "Failed to set MinIO alias, retrying in 5 seconds (attempt $retry_count/$max_retries)"
                  sleep 5
                fi
              done
              
              if [ "$alias_set" = "false" ]; then
                echo "Failed to set MinIO alias after $max_retries attempts, exiting"
                exit 1
              fi
              
              # Verify connection to MinIO
              if ! mc admin info myminio; then
                echo "Cannot connect to MinIO with admin permissions, check credentials and try again"
                exit 1
              fi
              
              # Check if user exists before adding
              if ! mc admin user info myminio min8chars1 > /dev/null 2>&1; then
                echo "Creating user min8chars1..."
                mc admin user add myminio min8chars1 MyStrongPass1!
              else
                echo "User min8chars1 already exists. Updating SECRET_KEY"
                mc admin user add myminio min8chars1 MyStrongPass1!
              fi
              
              # Create policy JSON inline
              POLICY_NAME="bucket-flowise_policy"
              echo "Creating policy $POLICY_NAME..."
              echo '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetBucketLocation",
                      "s3:ListBucket"
                    ],
                    "Resource": [
                      "arn:aws:s3:::bucketflowise"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject",
                      "s3:PutObject"
                    ],
                    "Resource": [
                      "arn:aws:s3:::bucketflowise/*"
                    ]
                  }
                ]
              }' > /tmp/policy.json
              
              # Check if policy exists before creating
              if ! mc admin policy info myminio $POLICY_NAME > /dev/null 2>&1; then
                echo "Creating new policy $POLICY_NAME..."
                mc admin policy create myminio $POLICY_NAME /tmp/policy.json
              else
                echo "Policy $POLICY_NAME already exists."
              fi
              
              # Attach policy to user
              echo "Attaching policy $POLICY_NAME to user min8chars1..."
              mc admin policy attach myminio $POLICY_NAME --user min8chars1
              
              # Check if the bucket exists
              if ! mc ls myminio/bucketflowise > /dev/null 2>&1; then
                echo "Creating bucket 'bucketflowise'..."
                mc mb myminio/bucketflowise
                echo "Bucket 'bucketflowise' created successfully."
              else
                echo "Bucket 'bucketflowise' already exists."
              fi
              echo "Setting bucket 'bucketflowise' as public..."
              mc anonymous set public myminio/bucketflowise
              
              echo "bucket-flowise bucket setup completed successfully!"
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: root-password
      restartPolicy: Never
  backoffLimit: 2
---

apiVersion: batch/v1
kind: Job
metadata:
  name: bucket-llama-user-bucket-job
  namespace: minio
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-minio
        image: busybox:1.28
        command: ['sh', '-c', 'until wget -T 1 -q -O - http://minio.minio.svc.cluster.local:9000/minio/health/ready || [ $SECONDS -gt 120 ]; do echo "Waiting for MinIO to be ready... ($SECONDS seconds elapsed)"; sleep 2; done; if wget -T 1 -q -O - http://minio.minio.svc.cluster.local:9000/minio/health/ready; then echo "MinIO is ready!"; else echo "Timed out waiting for MinIO"; exit 1; fi']
      containers:
        - name: bucket-llama-user-bucket-job
          image: minio/mc:RELEASE.2024-08-26T10-49-58Z 
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Set alias using HTTP (adjust protocol as needed)
              echo "MinIO endpoint is available, proceeding with configuration..."
              # Try to set the alias with retries
              max_retries=5
              retry_count=0
              alias_set=false
              
              while [ $retry_count -lt $max_retries ] && [ "$alias_set" = "false" ]; do
                if mc alias set myminio http://minio.minio.svc.cluster.local:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; then
                  echo "Successfully set MinIO alias on attempt $((retry_count+1))"
                  alias_set=true
                else
                  retry_count=$((retry_count+1))
                  echo "Failed to set MinIO alias, retrying in 5 seconds (attempt $retry_count/$max_retries)"
                  sleep 5
                fi
              done
              
              if [ "$alias_set" = "false" ]; then
                echo "Failed to set MinIO alias after $max_retries attempts, exiting"
                exit 1
              fi
              
              # Verify connection to MinIO
              if ! mc admin info myminio; then
                echo "Cannot connect to MinIO with admin permissions, check credentials and try again"
                exit 1
              fi
              
              # Check if user exists before adding
              if ! mc admin user info myminio min8chars1 > /dev/null 2>&1; then
                echo "Creating user min8chars1..."
                mc admin user add myminio min8chars1 MyStrongPass1!
              else
                echo "User min8chars1 already exists. Updating SECRET_KEY"
                mc admin user add myminio min8chars1 MyStrongPass1!
              fi
              
              # Create policy JSON inline
              POLICY_NAME="bucket-llama_policy"
              echo "Creating policy $POLICY_NAME..."
              echo '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetBucketLocation",
                      "s3:ListBucket"
                    ],
                    "Resource": [
                      "arn:aws:s3:::bucketllama"
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject",
                      "s3:PutObject"
                    ],
                    "Resource": [
                      "arn:aws:s3:::bucketllama/*"
                    ]
                  }
                ]
              }' > /tmp/policy.json
              
              # Check if policy exists before creating
              if ! mc admin policy info myminio $POLICY_NAME > /dev/null 2>&1; then
                echo "Creating new policy $POLICY_NAME..."
                mc admin policy create myminio $POLICY_NAME /tmp/policy.json
              else
                echo "Policy $POLICY_NAME already exists."
              fi
              
              # Attach policy to user
              echo "Attaching policy $POLICY_NAME to user min8chars1..."
              mc admin policy attach myminio $POLICY_NAME --user min8chars1
              
              # Check if the bucket exists
              if ! mc ls myminio/bucketllama > /dev/null 2>&1; then
                echo "Creating bucket 'bucketllama'..."
                mc mb myminio/bucketllama
                echo "Bucket 'bucketllama' created successfully."
              else
                echo "Bucket 'bucketllama' already exists."
              fi
              echo "Setting bucket 'bucketllama' as public..."
              mc anonymous set public myminio/bucketllama
              
              echo "bucket-llama bucket setup completed successfully!"
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: root-password
      restartPolicy: Never
  backoffLimit: 2
---

